//________________________________________________________________//
real L=1;

int n=5*2;
int n2=n*2;
int n3=n2*2;
real h=1.0/n;
mesh th = square(n,L,[x,y/50]);
mesh th2 = square(n2,L,[x,y/50]);
mesh th3 = square(n3,L,[x,y/50]);

// Mesh
/*
border c1 ( t=0,L)    {x=t; y=0; label=1;}
border c2 ( t=0,L)    {x=L; y=t; label=1;}
border c3 ( t=L,0)    {x=t; y=L; label=1;}
border c4 ( t=L,0)    {x=0; y=t; label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh( c1(n) + c2(n) + c3(n) + c4(n) + C(-n) );
//th = adaptmesh(th,0.05,IsMetric=1,splitpbedge=1);
mesh th2=buildmesh( c1(n2) + c2(n2) + c3(n2) + c4(n2) + C(-n2) );
//th2 = adaptmesh(th2,0.05,IsMetric=1,splitpbedge=1);
mesh th3=buildmesh( c1(n3) + c2(n3) + c3(n3) + c4(n3) +C(-n3) );
//th3 = adaptmesh(th3,0.05,IsMetric=1,splitpbedge=1);
border C1(t=0, 2.*pi){x= 0.5*L + r2*cos(t); y= 0.5*L + r2*sin(t); label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh(C1(n) + C(-n));
mesh th2=buildmesh(C1(n2) + C(-n2));
mesh th3=buildmesh(C1(n3) + C(-n3));
*/
//plot(th);plot(th2);plot(th3);


//________________________________________________________________//
//Parameters
int NB=5, m=0;
real dtmax=0.0001, dt=dtmax, t=0, Tf=0.0005;
real dtemp;
//func psi= ( (x >0.5) && (y >0.5)  ) ? 0.5 : 0 ;
func psi=0.5*x*x;
real Itf = Tf/dt;


//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<=NB;j++){
		aa(i-1,j-1)=alpha/(i*j);		
		//aa(i-1,j-1)=1.0;
	}
}
//vector coeff_d
real[int] coeffd(NB);
for (int i=0;i<NB;i++){
	coeffd(i)= 1.0 /((i+1)^(1.0/3));
//	cout << "coeff("<<i<<")="<<coeffdd[i] <<endl;
}
//Picard 
real[int] er(Itf);
int[int] itP(Itf);
int warning=0; 
real eps =0.002; //tol ur urold
real errp;
int maxItp=30;
//________________________________________________________________//
fespace Vh(th,P1,periodic=[[1,x],[3,x]]);
Vh u,vh;
Vh[int] uu1(NB);
Vh[int] uuold(NB);
Vh[int] Qg(NB);
Vh[int] Ql(NB);

//Picard
Vh[int] urold(NB);
Vh[int]  ur(NB);

//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
	urold[m]=0;
}

//________________________________________________________________//
//Function to calculate dt
func real calcdt(){
	real dt1=dtmax;
	real dtemp=dtmax;
	for( int i=0; i<NB; i++){
		for (int id=0; id < th.nv ; id++){
			if (Ql[i][][id] != 0){
			 	dtemp=(uuold[i][][id])/(Ql[i][][id]);
			 	if (dtemp<dt1){
					dt1=dtemp;
				}
			}	
		} 
	}
	return dt1;
 }
//________________________________________________________________//
//Macro to calculate Qloss 
	//add after *uold[m]
macro Qloss(uold,Ql)	
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//

//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1(uold,Qg)
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*uold[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
	}

//

//ur and uold
macro Qgain2(ur,Qg)
	Vh sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*ur[j-1]*ur[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
//
//________________________________________________________________//
// for one index
macro Qg1(ur,m,Qg)
{
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*ur[m2-1]*ur[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
}
//

macro Qlr(ur,m,Ql)
{
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*ur[m2];	
		}
		Ql[m]=sum;
}
//
//________________________________________________________________//
macro Picard
	smu1; 	ur[0]=u;
	for (m=1; m<NB-1;m++){ smu2; ur[m] = u;}
	smu3; 	ur[NB-1] = u;


	er[it]=int2d(th) ( ((ur[0] - urold[0])^2)/ ( (urold[0])^2 ? (urold[0])^2: 1) );

	for (m=1; m<NB;m++){
		errp=int2d(th) ( ((ur[m] - urold[m])^2)/ ( (urold[m])^2 ? (urold[m])^2: 1) );
		er[it]=max(er[it],errp);
	}
	er[it]=sqrt(er[it]);
	if(er[it]>15) {warning= warning+1;}
	
	for (m=0; m<NB; m++){	urold[m] = ur[m];}

//
//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //

//Solve problem cluster size 1
problem smu1 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[0]*vh)
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
- int1d(th,3) (dt*psi*vh)
//- int2d(th) (dt*psi*vh)
;

//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[m]*vh)
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
- int2d(th,qft=qf1pTlump)(dt*Qg[m]*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (dt*Qg[NB-1]*vh)
;

//________________________________________________________________//
//Time loop
real umin;

for ( int it = 0; it <Itf ; it++) 
{
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	//cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	}
	
	umin = ur[0][].min;
	for (m=0; m<NB; m++)
	{
		uuold[m]=ur[m];
		if (umin > uuold[m][].min) { umin=uuold[m][].min;}
	}
	
	//dt
	t = t + dt;
	//cout <<  "it " << it << " dt " << dt << " umin " << umin << endl;
}
for (m=0; m<NB; m++){uu1[m]=ur[m];}
real t1=t;
cout << " t1  =   " << t1 << endl;
cout <<" ________________________________________________________________" <<endl;
//________________________________________________________________//
//________________________________________________________________//
fespace Vh2(th2,P1,periodic=[[1,x],[3,x]]);
Vh2 u2,vh2;
Vh2[int] uu2(NB);
Vh2[int] uuold2(NB);
Vh2[int] Qg2(NB);
Vh2[int] Ql2(NB);

//Picard
Vh2[int] urold2(NB);
Vh2[int]  ur2(NB);

//Initialise u0
for (m=0;m<NB;m++){
	uuold2[m]=0;
	urold2[m]=0;
}

//________________________________________________________________//
//Function to calculate dt

//________________________________________________________________//
//Macro to calculate Qloss 
	//add after *uold[m]
macro Qloss2(uold,Ql)	
for (m=0;m<NB-1;m++){
		Vh2 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//

//________________________________________________________________//
// macros to calculate Qgain
macro Qgain12(uold,Qg)
	for (m=2;m<NB;m++){
		Vh2 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*uold[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
	}

//

//ur and uold
macro Qgain22(ur,Qg)
	Vh2 sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*ur[j-1]*ur[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
//
//________________________________________________________________//
// for one index
macro Qg12(ur,m,Qg)
{
		Vh2 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*ur[m2-1]*ur[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
}
//

macro Qlr2(ur,m,Ql)
{
		Vh2 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*ur[m2];	
		}
		Ql[m]=sum;
}
//
//________________________________________________________________//
macro Picard2(urold,ur)
	smu12; 	ur[0]=u2;
	for (m=1; m<NB-1;m++){ smu22; ur[m] = u2;}
	smu32; 	ur[NB-1] = u2;


	er[it]=int2d(th2) ( ((ur[0] - urold[0])^2)/ ( (urold[0])^2 ? (urold[0])^2: 1) );

	for (m=1; m<NB;m++){
		errp=int2d(th2) ( ((ur[m] - urold[m])^2)/ ( (urold[m])^2 ? (urold[m])^2: 1) );
		er[it]=max(er[it],errp);
	}
	er[it]=sqrt(er[it]);
	if(er[it]>15) {warning= warning+1;}
	
	for (m=0; m<NB; m++){	urold[m] = ur[m];}

//
//________________________________________________________________//
problem smu12 (u2 , vh2)= 
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[0]*vh2)
+ int2d(th2,qft=qf1pTlump)(dt*u2*Ql2[0]*vh2)
- int1d(th2,3) (dt*psi*vh2)
//- int2d(th2) (dt*psi*vh2)
;

//Solve problem cluster size 2...NB-1
problem smu22 (u2 , vh2)= 
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[m]*vh2)
+ int2d(th2,qft=qf1pTlump)(dt*u2*Ql2[m]*vh2)
- int2d(th2,qft=qf1pTlump)(dt*Qg2[m]*vh2)
;

//Solve problem cluster size NB
problem smu32 (u2 , vh2)=
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[NB-1]*vh2)
- int2d(th2,qft=qf1pTlump) (dt*Qg2[NB-1]*vh2)
;

//________________________________________________________________//
//Time loop 2
real umin2;
t=0;
for ( int it = 0; it <Itf ; it++) 
{
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss2(urold2,Ql2)
	Qgain12(urold2,Qg2)
	Qgain22(urold2,Qg2)
	Picard2(urold2,ur2)
	itP[it]= itP[it] +1;
	//cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	}
	
	umin2 = ur2[0][].min;
	for (m=0; m<NB; m++)
	{
		uuold2[m]=ur2[m];
		if (umin2 > uuold2[m][].min) { umin2=uuold2[m][].min;}
	}
	
	//dt
	t = t + dt;
	//cout <<  "it " << it << " dt " << dt << " umin2 " << umin << endl;
}
for (m=0; m<NB; m++){uu2[m]=ur2[m];}
real t2=t;
cout << " t2  =   " << t2 << endl;
cout <<" ________________________________________________________________" <<endl;
//________________________________________________________________//
//________________________________________________________________//
fespace Vh3(th3,P1,periodic=[[1,x],[3,x]]);
Vh3 u3,vh3;
Vh3[int] uu3(NB);
Vh3[int] uuold3(NB);
Vh3[int] Qg3(NB);
Vh3[int] Ql3(NB);

//Picard
Vh3[int] urold3(NB);
Vh3[int]  ur3(NB);

//Initialise u0
for (m=0;m<NB;m++){
	uuold3[m]=0;
	urold3[m]=0;
}
//________________________________________________________________//
//Function to calculate dt

//________________________________________________________________//
//Macro to calculate Qloss 
	//add after *uold[m]
macro Qloss3(uold,Ql)	
for (m=0;m<NB-1;m++){
		Vh3 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//

//________________________________________________________________//
// macros to calculate Qgain
macro Qgain13(uold,Qg)
	for (m=2;m<NB;m++){
		Vh3 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*uold[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
	}

//

//ur and uold
macro Qgain23(ur,Qg)
	Vh3 sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*ur[j-1]*ur[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
//
//________________________________________________________________//
// for one index
macro Qg13(ur,m,Qg)
{
		Vh3 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*ur[m2-1]*ur[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
}
//

macro Qlr3(ur,m,Ql)
{
		Vh3 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*ur[m2];	
		}
		Ql[m]=sum;
}
//
//________________________________________________________________//
macro Picard3(urold,ur)
	smu13; 	ur[0]=u3;
	for (m=1; m<NB-1;m++){ smu23; ur[m] = u3;}
	smu33; 	ur[NB-1] = u3;


	er[it]=int2d(th3) ( ((ur[0] - urold[0])^2)/ ( (urold[0])^2 ? (urold[0])^2: 1) );

	for (m=1; m<NB;m++){
		errp=int2d(th3) ( ((ur[m] - urold[m])^2)/ ( (urold[m])^2 ? (urold[m])^2: 1) );
		er[it]=max(er[it],errp);
	}
	er[it]=sqrt(er[it]);
	if(er[it]>15) {warning= warning+1;}
	
	for (m=0; m<NB; m++){	urold[m] = ur[m];}

//
//________________________________________________________________//
//Solve problem cluster size 1
problem smu13 (u3 , vh3)= 
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[0]*vh3)
+ int2d(th3,qft=qf1pTlump)(dt*u3*Ql3[0]*vh3)
- int1d(th3,3) (dt*psi*vh3)
//- int2d(th3) (dt*psi*vh3)
;

//Solve problem cluster size 2...NB-1
problem smu23 (u3 , vh3)= 
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[m]*vh3)
+ int2d(th3,qft=qf1pTlump)(dt*u3*Ql3[m]*vh3)
- int2d(th3,qft=qf1pTlump)(dt*Qg3[m]*vh3)
;

//Solve problem cluster size NB
problem smu33(u3 , vh3)=
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[NB-1]*vh3)
- int2d(th3,qft=qf1pTlump) (dt*Qg3[NB-1]*vh3)
;

//________________________________________________________________//
//Time loop 3
real umin3;
t=0;
for ( int it = 0; it <Itf ; it++) 
{
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss3(urold3,Ql3)
	Qgain13(urold3,Qg3)
	Qgain23(urold3,Qg3)
	Picard3(urold3,ur3)

	itP[it]= itP[it] +1;
	//cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	}
	
	umin3 = ur3[0][].min;
	for (m=0; m<NB; m++){
		uuold3[m] = ur3[m];
		if (umin3 > uu3[m][].min) { umin3=uu3[m][].min;}
	}

	t = t + dt;
	//cout <<  "it " << it <<" umin3 " << umin3 << endl;

}
real t3=t;
cout << " t3 =   " << t3 << endl;
for (m=0; m<NB; m++){uu3[m]=ur3[m];}

cout <<" ________________________________________________________________" <<endl;
//________________________________________________________________//
//________________________________________________________________//
/*plot(th,uu1[0],value=true,fill=true);
plot(th2,uu2[0],value=true,fill=true);
plot(th3,uu3[0],value=true,fill=true);
plot(th,uu1[NB-1],value=true,fill=true);
plot(th2,uu2[NB-1],value=true,fill=true);
plot(th3,uu3[NB-1],value=true,fill=true);
*/
cout << "Number vertices : " << th.nv << endl;
cout << " t1 t2 t3  =   " << t1 << " " << t2 << " "<< t3 << endl;

//________________________________________________________________//
real[int] err1(NB);
real[int] err2(NB);
real[int] p(NB);

for (int i=0 ;i<NB; i++){ 
	err1[i] = sqrt(  int2d(th) ((uu1[i] - uu2[i])^2) );
	err2[i] = sqrt ( int2d(th) ((uu2[i] - uu3[i])^2) );

	cout << "err1("<<i+1<<")= " << err1[i] << endl;
	cout << "err2("<<i+1<<")= " << err2[i] << endl;
}

for  (int i=0 ;i<NB; i++){ 
	p[i]=log(err1[i]/err2[i]);
	p[i]=p[i]/log(2.0);
	cout << "p(" << i+1 <<")= " << p[i] << ";" <<endl;
}






 



/*
//Time loop 2 
dt=dt/2;
Itf=Tf/dt;
//itP.resize(Itf);
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
	urold[m]=0;
}

for ( int it = 0; it <Itf ; it++) 
{	
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	//cout << "  Error Picard " << er[it] << endl;

	}
	umin = ur[0][].min;
	for (m=0; m<NB; m++)
	{
		uuold[m]=ur[m];
		if (umin > uuold[m][].min) { umin=uuold[m][].min;}
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << " dt " << dt << " umin " << umin << endl;


}
for (m=0; m<NB; m++){uu2[m]=ur[m];}
real t2=t;
//________________________________________________________________//
//Time loop 3
dt=dt/2;
Itf=Tf/dt;
//itP.resize(Itf);
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
	urold[m]=0;
}

for ( int it = 0; it <Itf ; it++) 
{	
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	//cout << "  Error Picard " << er[it] << endl;

	}
	
	umin = ur[0][].min;
	for (m=0; m<NB; m++)
	{
		uuold[m]=ur[m];
		if (umin > uuold[m][].min) { umin=uuold[m][].min;}
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << " dt " << dt << " umin " << umin << endl;


}
for (m=0; m<NB; m++){uu3[m]=ur[m];}
real t3=t;
//________________________________________________________________//
//________________________________________________________________//
//Time loop 4
dt=dt/2;
Itf=Tf/dt;
//itP.resize(Itf);
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
	urold[m]=0;
}

for ( int it = 0; it <Itf ; it++) 
{	
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	//cout << "  Error Picard " << er[it] << endl;

	}
	
	umin = ur[0][].min;
	for (m=0; m<NB; m++)
	{
		uuold[m]=ur[m];
		if (umin > uuold[m][].min) { umin=uuold[m][].min;}
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << " dt " << dt << " umin " << umin << endl;


}
for (m=0; m<NB; m++){uu4[m]=ur[m];}
real t4=t;
*/
//________________________________________________________________//

//cout

cout << "Number vertices : " << th.nv << endl;
cout << "Iteration : " << Itf-1 << "   Tf =   " << t << endl;
cout << "hmax^2 " << (th3.hmin)^2 << endl;
cout << "E Picard " << itP.min << " _ " << itP.max << " emax :  " <<er.max << endl;
cout << "Nb of warnings EPicard > 15 : " << warning << endl;

/*cout << " t1 t2 t3  =   " << t1 << " " << t2 << " "<< t3 << " "<< t4 << endl;

//________________________________________________________________//
real[int] err1(NB);
real[int] err2(NB);
real[int] err3(NB);
for (int i=0 ;i<NB; i++){ 
	err1[i] = sqrt( int2d(th) ((uu1[i] - uu2[i])^2) );
	err2[i] = sqrt ( int2d(th) ((uu2[i] - uu3[i])^2) );
	err3[i] = sqrt ( int2d(th) ((uu3[i] - uu4[i])^2) );
	
	cout << "err1("<<i+1<<")= " << err1[i] << endl;
	cout << "err2("<<i+1<<")= " << err2[i] << endl;
	cout << "err3("<<i+1<<")= " << err3[i] << endl;
}
*/




