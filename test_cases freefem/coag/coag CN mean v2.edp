real L=1;
real r=0.2;
int n=5*2*2;

real h=1.0/n;
// Mesh

border c1 ( t=0,L)    {x=t; y=0; label=1;}
border c2 ( t=0,L)    {x=L; y=t; label=1;}
border c3 ( t=L,0)    {x=t; y=L; label=1;}
border c4 ( t=L,0)    {x=0; y=t; label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh( c1(n) + c2(n) + c3(n) + c4(n) + C(-n) );
plot(th, wait= true, cmm = "Mesh");


cout << "  -- mesh: Hmax = " << th.hmax << endl;

//________________________________________________________________//
//Parameters
int NB=3, m=0;
real dtmax=0.4, dt=dtmax, t=0, Tf=12;
func psi=0.5;
real Itf =Tf/dtmax;

//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<=NB;j++){
		aa(i-1,j-1)=alpha/(i*j);		
		//aa(i-1,j-1)=1.0;
	}
}
/*vector coeff_d
real[int] coeffd(NB);
for (int i=0;i<NB;i++){
	coeffd(i)= 1.0 /((i+1)^(1.0/3));
//	cout << "coeff("<<i<<")="<<coeffdd[i] <<endl;
}
*/
//________________________________________________________________//
fespace Vh(th,P1);
Vh u,vh;
Vh[int] uu(NB);
//Vh[int] uu2(NB);
//Vh[int] uu3(NB);
Vh[int] uuold(NB);
Vh[int] Qg(NB);
Vh[int] Ql(NB);
Vh[int] Qgold(NB);
Vh[int] Qlold(NB);


//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
//________________________________________________________________//
//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss	
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1(u,Qg)
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*u[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain11(u,m,Qg)
	{
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*u[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain2(u,Qg)
{
	Vh sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*u[j-1]*u[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
}
//

//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //

//Solve problem cluster size 1
problem smu1 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[0]*vh)
- int1d(th,2) (dt*psi*vh)
;

//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[m]*vh)
- int2d(th,qft=qf1pTlump)(0.5*dt*(Qg[m]+Qgold[m])*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)=
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (0.5*dt*(Qg[NB-1]+Qgold[NB-1])*vh)
;
//________________________________________________________________//
//Time loop 1
for ( int it = 0; it <Itf ; it++) 
{	
	//calculating Q
	
	//Calculating Qloss
	Qloss
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1(uuold,Qgold)
	//Calculating Qgain for assembly size NB
	Qgain2(uuold,Qgold)
	
	//dt=calcdt(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	// monomeric form
	smu1;
	uu[0]=u;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain11(uu,m+1,Qg)
		smu2;
		uu[m] = u;
	}

	//Assembly size NB
	Qgain2(uu,Qg)
	smu3;
	uu[NB-1] = u;
	
	for (m=0; m<NB; m++){
		uuold[m] = uu[m];
		}
	
	//dt
	t = t + dt;

	cout <<  "it " << it  << endl;

}
real t1=t;
cout << " t1 =   " << t1 << endl;
cout << "________________________________________________________________" <<endl;
//________________________________________________________________//
/*
//Time loop 2 
dtmax=dtmax/2;
dt=dtmax;
Itf=Tf/dtmax;
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
for ( int it = 0; it <Itf ; it++) 
{	
	Qloss

	Qgain1(uuold,Qgold)
	Qgain2(uuold,Qgold)
    cout << "dt=" << calcdt() << endl;
	// monomeric form
	smu1;	uu2[0]=u;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain11(uu2,m+1,Qg)
		smu2; uu2[m] = u;
	}
	//Assembly size NB
	Qgain2(uu2,Qg)
	smu3;	uu2[NB-1] = u;
	
	umin = uu[0][].min;
	for (m=0; m<NB; m++){
		uuold[m] = uu2[m];
		if (umin > uu2[m][].min) { umin=uu2[m][].min;}
	}
	
	t = t + dt;
	cout <<  "it " << it <<" umin2 " << umin << endl;
}
real t2=t;
cout << "________________________________________________________________" <<endl;

//________________________________________________________________//
//Time loop 3
dtmax=dtmax/2;
dt=dtmax;
Itf=Tf/dtmax;
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
for ( int it = 0; it <Itf ; it++) 
{	
	Qloss
	Qgain1(uuold,Qgold)
	Qgain2(uuold,Qgold)

	cout << "dt=" << calcdt() << endl;
	// monomeric form
	smu1;	uu3[0]=u;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain11(uu3,m+1,Qg)
		smu2; uu3[m] = u;
	}
	//Assembly size NB
	Qgain2(uu3,Qg)
	smu3;	uu3[NB-1] = u;
	
	umin = uu[0][].min;
	for (m=0; m<NB; m++){
		uuold[m] = uu3[m];
		if (umin > uu3[m][].min) { umin=uu3[m][].min;}
	}
	
	t = t + dt;
	cout <<  "it " << it <<" umin2 " << umin << endl;

}
cout << "________________________________________________________________" <<endl;
real t3=t;
//________________________________________________________________//

plot(th,uu[NB-1],wait=1,fill=true);
plot(th,uu2[NB-1],wait=1,fill=true);
plot(th,uu3[NB-1],wait=1,fill=true);
cout << "Number vertices : " << th.nv << endl;
cout << " t1 t2 t3  =   " << t1 << " " << t2 << " "<< t3 << endl;

//________________________________________________________________//
real[int] err1(NB);
real[int] err1h(NB);
real[int] err2(NB);
real p;
real ph;

for (int i=0 ;i<NB; i++){ 
	err1[i] = sqrt( int2d(th) ((uu[i] - uu2[i])^2) );
	err1h[i] = sqrt( int2d(th) ((uu[i] - uu3[i])^2) );
	err2[i] = sqrt ( int2d(th) ((uu2[i] - uu3[i])^2) );

	cout << "err1("<<i+1<<")= " << err1[i] << endl;
	cout << "\t err1h("<<i+1<<")= " << err1h[i] << endl;
	cout << "\t \t err2("<<i+1<<")= " << err2[i] << endl;
}

for  (int i=0 ;i<NB; i++){ 
	p=log(err1[i]/err2[i]);
	p=p/log(2.0);
	cout << "p(" << i+1 <<")= " << p << ";" <<endl;
}
endl;

for  (int i=0 ;i<NB; i++){ 
	ph=log(err1h[i]/err2[i]);
	ph=ph/log(2.0);
	cout << "\t ph(" << i+1 <<")= " << ph << ";" <<endl;
}
endl;
*/