//________________________________________________________________//
// Mesh
real L=1;
int n=5*2*2*2*2;
real h=1.0/n;
mesh th = square(n,1,[x,y/50]);
//plot(th);


 
//________________________________________________________________//

//Parameters
int NB=10, m=0;
real dtmax=0.025, dt=dtmax, t=0, Tf=1.0;
real Itf = Tf/dt;
func psi=0.5;


func real facto(int n){

  int c,fact = 1;
  for (c = 1; c <= n; c++){
    fact = fact * c;
  } 
  return fact;
}

//K=i*j
func real uvrai1(real m, real t){

	real u=(m^(m-3))/facto(m-1);
	if (t<=1){
	u=u*(t^(m-1))*exp(-m*t);
	}
	else{
	u=u*exp(-t)/t;
	}
	return u;	
}

//K=i+j
func real uvrai2(real m, real t){

	real u=1/m*(m*(1-exp(-t)))^(m-1);
	u=u*exp(-t)* exp( -m*( 1 - exp(-t) ) );
	return u;	
}

//K=1
func real uvrai3(real m, real t){

	real u=(1 + t/2)^(-2);
	u=u*( t/(t+1) )^(m-1);
	return u;	
}


//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<=NB;j++){
		//aa(i-1,j-1)=alpha/(i*j);
		//aa(i-1,j-1)=(i*j);			
		aa(i-1,j-1)=1.0;
		//(i-1,j-1)= i+j;

	}
}


//Picard 
real[int] er(Itf*50);
int[int] itP(Itf*50);
int warning=0; 
real eps =0.2; //tol ur urold
real errp;
int maxItp=30;
//________________________________________________________________//
fespace Vh(th,P1,periodic=[[1,x],[3,x]]); 
Vh u,vh;
Vh[int] uu1(NB);
Vh[int] uu2(NB);
Vh[int] uuold(NB);
Vh[int] Qg(NB);
Vh[int] Ql(NB);

//Picard
Vh[int] urold(NB);
Vh[int]  ur(NB);

//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]= uvrai1(m+1,0);
	urold[m]=uvrai1(m+1,0);
}


//________________________________________________________________//
//Function to calculate dt
//________________________________________________________________//
//Macro to calculate Qloss 
	//add after *uold[m]
macro Qloss(uold,Ql)	
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//

//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1(uold,Qg)
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*uold[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
	}

//

//ur and uold
macro Qgain2(ur,Qg)
	Vh sum=0;
	for (int j=1; j<=NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*ur[j-1]*ur[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
//
//________________________________________________________________//
// for one index
macro Qg1(ur,m,Qg)
{
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*ur[m2-1]*ur[m-m2-1];
		}
		Qg[m-1]=0.5*sum;
}
//

macro Qlr(ur,m,Ql)
{
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*ur[m2];	
		}
		Ql[m]=sum;
}
//
//________________________________________________________________//
macro Picard
	smu1; 	ur[0]=u;
	for (m=1; m<NB-1;m++){ smu2; ur[m] = u;}
	smu3; 	ur[NB-1] = u;


	er[it]=int2d(th) ( ((ur[0] - urold[0])^2)/ ( (urold[0])^2 ? (urold[0])^2: 1) );

	for (m=1; m<NB;m++){
		errp=int2d(th) ( ((ur[m] - urold[m])^2)/ ( (urold[m])^2 ? (urold[m])^2: 1) );
		er[it]=max(er[it],errp);
	}
	er[it]=sqrt(er[it]);
	if(er[it]>15) {warning= warning+1;}
	
	for (m=0; m<NB; m++){	urold[m] = ur[m];}

//
//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //

//Solve problem cluster size 1
problem smu1 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[0]*vh)
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
//- int1d(th,3) (dt*psi*vh)
;

//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[m]*vh)
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
- int2d(th,qft=qf1pTlump)(dt*Qg[m]*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)= 
  int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (dt*Qg[NB-1]*vh)
;

//________________________________________________________________//
//Time loop
for ( int it = 0; it <Itf ; it++) 
{
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	}
	for (m=0; m<NB; m++){uuold[m]=ur[m]; }
	//dt
	t = t + dt;
	//cout <<  "it " << it << " dt " << dt << endl;
}
for (m=0; m<NB; m++){uu1[m]=ur[m];}
real t1=t;
cout << " t1  =   " << t1 << endl;
cout <<"________________________________________________________________"<<endl;
//________________________________________________________________//

dt=dt/2;
Itf=Tf/dt;
t=0; 
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]= uvrai1(m+1,0);
	urold[m]=uvrai1(m+1,0);
}

for ( int it = 0; it <Itf ; it++) 
{
	er[it]=1;
	itP[it]=0;
	while( (er[it] > eps) && (itP[it] < maxItp) )
	{
	Qloss(urold,Ql)
	Qgain1(urold,Qg)
	Qgain2(urold,Qg)
	Picard
	itP[it]= itP[it] +1;
	cout << "ItP " << itP[it]<< "  Error Picard " << er[it] << endl;
	}


	for (m=0; m<NB; m++){uuold[m]=ur[m]; }
	
	
	//dt
	t = t + dt;
	//cout <<  "it " << it << " dt " << dt << endl;
}
for (m=0; m<NB; m++){uu2[m]=ur[m];}
real t2=t;
cout << " t2  =   " << t2 << endl;

//________________________________________________________________//

//plot(th,uu1[0],value=true,fill=true);
//plot(th,uu2[0],value=true,fill=true);

real[int] err11(NB);
real[int] err2(NB);
real p1;
for (int i=0 ;i<NB; i++){ 
	err11[i] = sqrt( (uu1[i][][0] - uvrai3(i+1,Tf))^2) ;
	err2[i] = sqrt ( ((uu2[i][][0] - uvrai3(i+1,Tf))^2) );
	p1=log(err11[i]/err2[i]);
	p1=p1/log(2.0);
	cout << "p=  " << p1 << " \t uvrai("<<i+1<<")=" <<  uvrai3(i+1,Tf) << "  u1 = " << uu1[i][][0] <<
	 "  u2 = " << uu2[i][][0] <<  endl;

	//cout << "err1("<<i+1<<")= " << err1[i] << "   err2("<<i+1<<")= " << err2[i] << endl;
;
}
