real L=1;
real r=0.2;
int n=5*2;
int n2=n*2;
int n3=n2*2;
real h=1.0/n;
//mesh th=square(n,n);
// Mesh

border c1 ( t=0,L)    {x=t; y=0; label=1;}
border c2 ( t=0,L)    {x=L; y=t; label=1;}
border c3 ( t=L,0)    {x=t; y=L; label=1;}
border c4 ( t=L,0)    {x=0; y=t; label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh( c1(n) + c2(n) + c3(n) + c4(n) + C(-n) );
mesh th2=buildmesh( c1(n2) + c2(n2) + c3(n2) + c4(n2) + C(-n2) );
mesh th3=buildmesh( c1(n3) + c2(n3) + c3(n3) + c4(n3) +C(-n3) );

plot(th, wait= true, cmm = "Mesh");
plot(th2, wait= true, cmm = "Mesh2");
plot(th3, wait= true, cmm = "Mesh3");

cout << "  -- mesh: Hmax = " << th.hmax << endl;

//________________________________________________________________//
//Parameters
int NB=3, m=0;
real dt=h/4, t=0, Tf=4, Itf=Tf/dt;
func psi=0.5;

//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<=NB;j++){
		aa(i-1,j-1)=alpha/(i*j);		
		//aa(i-1,j-1)=1.0;
	}
}
//vector coeff_d
real[int] coeffd(NB);
for (int i=0;i<NB;i++){
	coeffd(i)= 1.0 /((i+1)^(1.0/3));
//	cout << "coeff("<<i<<")="<<coeffdd[i] <<endl;
}
//________________________________________________________________//
fespace Vh(th,P1);
Vh u,vh;
Vh[int] uu(NB);
Vh[int] uuold(NB);
Vh[int] Qg(NB);
Vh[int] Ql(NB);
Vh[int] Qgold(NB);
Vh[int] Qlold(NB);

real umin=0;
//________________________________________________________________//
/*//Function to calculate dt
func real calcdt(){
	real dt1=dtmax;
	real dtemp=dtmax;
	for( int i=0; i<NB; i++){
		//cout << "cluster size " << i << endl;
		for (int id=0; id < th.nv ; id++){
			if (Ql[i][][id] != 0){
			//cout <<"in dt " << endl;
			//cout << "Q=" << Ql[i][][id] << "uold = " << uuold[i][][id]<<endl;
			 	dtemp=(uuold[i][][id])/(Ql[i][][id]);
			 	if (dtemp<dt1){
					//cout << "dtemp" << dtemp << endl;
					//cout << "Q=" << Ql[i][][id] << "uold = " << uuold[i][][id]<<endl;

					//cout << "    uold " << uuold[i][][id] << "Ql " << Ql << endl;
					dt1=dtemp;
				}
			}	
		} 
	}
	return dt1;
 }
*/
//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss	
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold[m2];	
		}
		Ql[m]=sum;
	}
	Ql[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1(u,Qg)
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*u[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain11(u,uold,m,Qg)
	{
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//
macro Qgain2(u,uold,Qg)
{
	Vh sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*uold[j-1]*u[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
}
//

//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //

//Solve problem cluster size 1
problem smu1 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[0]*vh)
- int1d(th,2) (dt*psi*vh)
;

//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
+ int2d(th,qft=qf1pTlump)(dt*u*Ql[m]*vh)
- int2d(th,qft=qf1pTlump)(dt*(Qg[m])*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)=
 int2d(th,qft=qf1pTlump)(u*vh)
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (dt*(Qg[m])*vh)
;
//________________________________________________________________//
//Time loop 1
Itf =Tf/dt;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}


for ( int it = 0; it <Itf ; it++) 
{	
	//calculating Q
	
	//Calculating Qloss
	Qloss
	//Calculating Qgain for assemblies size 2...NB-1
	//Qgain1(uuold,Qgold)
	//Calculating Qgain for assembly size NB
	//Qgain2(uuold,Qgold)

	//dt=calcdt(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	// monomeric form
	smu1;
	uu[0]=u;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain11(uu,uuold,m+1,Qg)
		smu2;
		uu[m] = u;
	}

	//Assembly size NB
	Qgain2(uu,uuold,Qg)
	smu3;
	uu[NB-1] = u;
	
	umin = uu[0][].min;
	for (m=0; m<NB; m++){
		uuold[m] = uu[m];
		if (umin > uu[m][].min) { umin=uu[m][].min;}
	}
	
	//dt
	t = t + dt;
	//cout << "IT " << it << endl;
	cout <<  "it " << it <<" umin1 " << umin << endl;

}
real t1=t;
cout << " t1 =   " << t1 << endl;
cout << "_____________________________________________________________" << endl;
//________________________________________________________________//

//________________________________________________________________//
fespace Vh2(th2,P1);
Vh2 u2,vh2;
Vh2[int] uu2(NB);
Vh2[int] uuold2(NB);
Vh2[int] Qg2(NB);
Vh2[int] Ql2(NB);
Vh2[int] Qgold2(NB);
Vh2[int] Qlold2(NB);

real umin2=0;


//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss2	
for (m=0;m<NB-1;m++){
		Vh2 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold2[m2];	
		}
		Ql2[m]=sum;
	}
	Ql2[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain12(u,Qg)
	for (m=2;m<NB;m++){
		Vh2 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*u[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain112(u,uold,m,Qg)
	{
		Vh2 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain22(u,uold,Qg)
{
	Vh2 sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*uold[j-1]*u[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
}
//

//________________________________________________________________//
//Solve problem cluster size 1
problem smu12 (u2 , vh2)= 
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[0]*vh2)
+ int2d(th2,qft=qf1pTlump)(dt*u*Ql2[0]*vh2)
- int1d(th2,2) (dt*psi*vh2)
;

//Solve problem cluster size 2...NB-1
problem smu22 (u2 , vh2)= 
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[m]*vh2)
+ int2d(th2,qft=qf1pTlump)(dt*u2*Ql2[m]*vh2)
- int2d(th2,qft=qf1pTlump)(dt*(Qg2[m])*vh2)
;

//Solve problem cluster size NB
problem smu32 (u2 , vh2)=
 int2d(th2,qft=qf1pTlump)(u2*vh2)
- int2d(th2,qft=qf1pTlump) (uuold2[NB-1]*vh2)
- int2d(th2,qft=qf1pTlump) (dt*(Qg2[NB-1])*vh2)
;
//________________________________________________________________//

//Time loop 2 
//dt=dt/2;
//Itf=Tf/dt;
t=0;

//Initialise u0
for (m=0;m<NB;m++){
	uuold2[m]=0;
}

for ( int it = 0; it <Itf ; it++) 
{	
	Qloss2
	//Qgain12(uuold2,Qgold2)
	//Qgain22(uuold2,Qgold2)
	
	// monomeric form
	smu12;	uu2[0]=u2;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain112(uu2,uuold2,m+1,Qg2)
		smu22; uu2[m] = u2;
	}
	//Assembly size NB
	Qgain22(uu2,uuold2,Qg2)
	smu32;	uu2[NB-1] = u2;
	
	umin2 = uu2[0][].min;
	for (m=0; m<NB; m++){
		uuold2[m] = uu2[m];
		if (umin2 > uu2[m][].min) { umin2=uu2[m][].min;}
	}
	
	t = t + dt;
	cout <<  "it " << it <<" umin2 " << umin2 << endl;
}
real t2=t;

cout << "_____________________________________________________________" << endl;

//________________________________________________________________//
//________________________________________________________________//
//________________________________________________________________//
fespace Vh3(th3,P1);
Vh3 u3,vh3;
Vh3[int] uu3(NB);
Vh3[int] uuold3(NB);
Vh3[int] Qg3(NB);
Vh3[int] Ql3(NB);
Vh3[int] Qgold3(NB);
Vh3[int] Qlold3(NB);

real umin3=0;

//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss3	
for (m=0;m<NB-1;m++){
		Vh3 sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold3[m2];	
		}
		Ql3[m]=sum;
	}
	Ql3[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain13(u,Qg)
	for (m=2;m<NB;m++){
		Vh3 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*u[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain113(u,uold,m,Qg)
	{
		Vh3 sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uold[m2-1]*u[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain23(u,uold,Qg)
{
	Vh3 sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*uold[j-1]*u[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
}
//

//________________________________________________________________//
//Solve problem cluster size 1
problem smu13 (u3 , vh3)= 
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[0]*vh3)
+ int2d(th3,qft=qf1pTlump)(dt*u3*Ql3[0]*vh3)
- int1d(th3,2) (dt*psi*vh3)
;

//Solve problem cluster size 2...NB-1
problem smu23 (u3 , vh3)= 
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[m]*vh3)
+ int2d(th3,qft=qf1pTlump)(dt*u3*Ql3[m]*vh3)
- int2d(th3,qft=qf1pTlump)(dt*(Qg3[m])*vh3)
;

//Solve problem cluster size NB
problem smu33 (u3 , vh3)=
 int2d(th3,qft=qf1pTlump)(u3*vh3)
- int2d(th3,qft=qf1pTlump) (uuold3[NB-1]*vh3)
- int2d(th3,qft=qf1pTlump) (dt*(Qg3[NB-1])*vh3)
;
//________________________________________________________________//

//Time loop 3 
//dt=dt/2;
//Itf=Tf/dt;
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold3[m]=0;
}
for ( int it = 0; it <Itf ; it++) 
{	
	Qloss3
//	Qgain13(uuold3,Qgold3)
//	Qgain23(uuold3,Qgold3)


	// monomeric form
	smu13;	uu3[0]=u3;
	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		Qgain113(uu3,uuold3,m+1,Qg3)
		smu23; uu3[m] = u3;
	}
	//Assembly size NB
	Qgain23(uu3,uuold3,Qg3)
	smu33;	uu3[NB-1] = u3;
	
	umin3 = uu3[0][].min;
	for (m=0; m<NB; m++){
		uuold3[m] = uu3[m];
		if (umin3 > uu3[m][].min) { umin3=uu3[m][].min;}
	}
	
	t = t + dt;
	cout <<  "it " << it <<" umin3 " << umin3 << endl;
}
real t3=t;
cout << "_____________________________________________________________" << endl;
//________________________________________________________________//

plot(th,uu[NB-1],wait=1,fill=true);
plot(th2,uu2[NB-1],wait=1,fill=true);
plot(th3,uu3[NB-1],wait=1,fill=true);
cout << "Number vertices : " << th.nv << endl;
cout << " t1 t2 t3  =   " << t1 << " " << t2 << " "<< t3 << endl;
cout << " umin1 2 3  =   " << umin << " " << umin2 << " "<< umin3 << endl;
cout << " Last dt " << dt <<endl;
//________________________________________________________________//
real[int] err1(NB);
real[int] err1h(NB);
real[int] err2(NB);
real[int] p(NB);
real[int] ph(NB);


for (int i=0 ;i<NB; i++){ 
	err1[i] = sqrt( int2d(th) ( (uu[i] - uu2[i])^2) );
	err1h[i] = sqrt( int2d(th) ( (uu[i] - uu3[i])^2) );
	err2[i] = sqrt ( int2d(th) ( (uu2[i] - uu3[i])^2) );

	cout << "err1("<<i+1<<")= " << err1[i] << endl;
	cout << "err1h("<<i+1<<")= " << err1h[i] << endl;
	cout << "err2("<<i+1<<")= " << err2[i] << endl;
	
}

for  (int i=0 ;i<NB; i++){ 
	p[i]=log(err1[i]/err2[i]);
	p[i]=p[i]/log(2.0);
	cout << "p(" << i+1 <<")= " << p[i] << ";" <<endl;
}

for  (int i=0 ;i<NB; i++){ 
	ph[i]=log(err1h[i]/err2[i]);
	ph[i]=ph[i]/log(2.0);
	cout << "ph(" << i+1 <<")= " << ph[i] << ";" <<endl;
}
endl;


//error bord
real[int] err1b(NB);
real[int] err2b(NB);
real pb=0;
for (int i=0 ;i<NB; i++){ 
	err1b[i] = sqrt( int1d(th,2) ( (uu[i] - uu2[i])^2) );
	err2b[i] = sqrt ( int1d(th,2) ( (uu2[i] - uu3[i])^2) );

	cout << "err1b("<<i+1<<")= " << err1b[i] << endl;
	cout << "err2b("<<i+1<<")= " << err2b[i] << endl;
	pb=log(err1b[i]/err2b[i]);
	pb=pb/log(2.0);
	cout << "\t \t pb(" << i+1 <<")= " << pb << ";" <<endl;

}

