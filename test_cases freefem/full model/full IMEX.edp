macro Border2 
border C1(t=0, 2.*pi){x= 0.3*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
border C2(t=0, 2.*pi){x= 0.6*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
border C3(t=0, 2.*pi){x= 0.9*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th = buildmesh(c1(n) + c2(n) + c3(n) + c4(n) + C1(-n) + C2(-n) +C3(-n));
//

macro Border1
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th = buildmesh(c1(n) + c2(n) + c3(n) + c4(n) + C(-n));
//
//________________________________________________________________//
real L=1;
real r=0.2;
int n=5*2*2*2*2;
real h=1.0/n;

// Mesh
border c1 ( t=0,L)    {x=t; y=0; label=1;}
border c2 ( t=0,L)    {x=L; y=t; label=1;}
border c3 ( t=L,0)    {x=t; y=L; label=1;}
border c4 ( t=L,0)    {x=0; y=t; label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh( c1(n) + c2(n) + c3(n) + c4(n) + C(-n) );

//________________________________________________________________//
//Parameters
int NB=10, N0=8,m,it=0;
bool b=true;
real dtmax=0.2, dt=dtmax,dt2=dtmax, t=0, Tf=10;
real mass,kc=0.7,tk=Tf;

func psi=( (x >0.5) && (y > 0.6) ) ? 0.5 : 0;


//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<NB;j++){
		aa(i-1,j-1)=alpha/(i*j);		
	}
}
//vector coeff_d
real[int] coeffd(NB);
for (int i=0;i<NB;i++){
	if(i<N0){coeffd(i)= 1.0;}
	else {coeffd(i)=0;}
}


//RK param 
real gamma = 1 - sqrt(2)/2.0;
real delta = 1 - 1/(2*sqrt(gamma));

//________________________________________________________________//
fespace Vh(th,P1);
Vh u,vh;
Vh[int] uuold(NB);
Vh[int] uu2(NB);
Vh[int] uu3(NB);
Vh[int] Qg1(NB);
Vh[int] Qg2(NB);
Vh[int] Ql1(NB);
Vh[int] Ql2(NB);
real umin=0;

//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
//________________________________________________________________//
//Function to calculate dt
func real calcdt(){
	real dt1=dtmax;
	real dtemp=dtmax;
	for( int i=0; i<NB; i++){
		for (int id=0; id < th.nv ; id++){
			if (Ql1[i][][id] != 0){
			 	dtemp=(uuold[i][][id])/(Ql1[i][][id]);
			 	if (dtemp<dt1){
					dt1=dtemp;
				}
			}	
		} 
	}
	return dt1;
 }
//________________________________________________________________//
//Function to calculate dt2

func real calcdt2(){
	real dt2=dtmax, dtemp=dtmax;

	for( int i=0; i<NB; i++){
		for (int id=0; id < th.nv ; id++){
			if (Ql1[i][][id] != 0){
			 	dtemp=(uuold[i][][id])/(gamma*Ql1[i][][id]);
			 	if (dtemp<dt2){
					dt2=dtemp;
				}
			}	
		} 
	}
	return dt2;
 }
//________________________________________________________________//
//Function to calculate dt3bis

func real calcdt3bis(){
	real dt3=dtmax, dtemp=dtmax;

	for( int m=0; m<NB; m++){
		for (int id=0; id < th.nv ; id++){
			if (Ql2[m][][id] != 0){
			 	dtemp=(uu2[m][][id])/( (1-delta)*Ql2[m][][id] );
			 	if (dtemp<dt3){
					dt3=dtemp;
				}
			}	
		} 
	}
	return dt3;
 }
//________________________________________________________________//
//Function to calculate dt
func real calcdt3(){
        real dt3 = dtmax, dtemp=dtmax; 
        bool b=false;
		real denom=0;


        cout <<"In calc dt3"<<endl;
        for( int m=0; m<NB; m++){
            for (int id=0; id < th.nv ; id++){
                if (uuold[m][][id]>0){ 
                    denom = delta*Ql1[m][][id] + (1-delta)*Ql2[m][][id];
                    if (denom > 0){
                        dtemp = (uuold[m][][id])/denom;
                        if (dtemp < dt3){
                            dt3 = dtemp; 
                            b = true;
                        }
					}
				}
			}
		}
        return dt3;
 }
//________________________________________________________________//

//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss(uuold,Ql)
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold[m2];	
		}
		Ql[m]=uuold[m]*sum;
	}
	Ql[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1(uuold,Qg)
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uuold[m2-1]*uuold[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain2(uuold,Qg)
{
	Vh sum=0;
	for (int j=1; j<=NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*uuold[j-1]*uuold[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
}
//

macro calcmass(uu)
	mass=0;
	for (int i=0; i < N0; i++){
		mass= mass + int2d(th) (uu[i]);
	}
//
//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //
// Calcul U2

//Solve problem cluster size 1
problem smu1 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[0]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
- int2d(th,qft=qf1pTlump)(-dt*gamma*Ql1[0]*vh)
- int1d(th,2) (dt*gamma*psi*vh)
;
//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[m]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
- int2d(th,qft=qf1pTlump)(dt*gamma*(Qg1[m] - Ql1[m])*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)=
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[NB-1]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (dt*gamma*Qg1[NB-1]*vh)
;
//________________________________________________________________//
// Calcul U3

//Solve problem cluster size 1
problem smu13 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[0]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
+ int2d(th,qft=qf1pTlump)( dt*( delta*Ql1[0] + (1-delta)*Ql2[0] )*vh)
+ int2d(th,qft=qf1pTlump)(dt*(1-gamma)*coeffd[0]*Grad(uu2[0])'*Grad(vh))
- int1d(th,2) (dt*psi*vh)
;
//Solve problem cluster size 2...NB-1
problem smu23 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[m]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
+ int2d(th,qft=qf1pTlump)( dt*( delta*Ql1[m] + (1-delta)*Ql2[m] )*vh)
- int2d(th,qft=qf1pTlump)( dt*( delta*Qg1[m] + (1-delta)*Qg2[m] )*vh)
+ int2d(th,qft=qf1pTlump)(dt*(1-gamma)*coeffd[m]*Grad(uu2[m])'*Grad(vh))
;

//Solve problem cluster size NB
problem smu33 (u , vh)=
 int2d(th,qft=qf1pTlump)(u*vh + dt*gamma*coeffd[NB-1]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump)( dt*( delta*Qg1[NB-1] + (1-delta)*Qg2[NB-1] )*vh)
+ int2d(th,qft=qf1pTlump)(dt*(1-gamma)*coeffd[NB-1]*Grad(uu2[NB-1])'*Grad(vh))
;
//________________________________________________________________//

//Time loop 1

while (t < Tf )
{	
	//calculating Q1= Qg1, Ql1
	
	//Calculating Qloss
	Qloss(uuold,Ql1)
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1(uuold, Qg1)
	//Calculating Qgain for assembly size NB
	Qgain2(uuold,Qg1)
	
	dt=calcdt2(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	//Calc U2
	smu1;	uu2[0]=u;
	for (m=1; m<NB-1;m++){smu2;uu2[m] = u;}
	smu3; uu2[NB-1] = u;
	
	//Calculating Qloss
	Qloss(uu2,Ql2)
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1(uu2, Qg2)
	//Calculating Qgain for assembly size NB
	Qgain2(uu2,Qg2)
	
	dt2=calcdt3bis(); cout << "dt2=" << dt2 << endl; 
	//cout << "dt=" << calcdt() << endl;

	//Calc U3
	smu13;	uu3[0]=u;
	for (m=1; m<NB-1;m++){smu23;uu3[m] = u;}
	smu33; uu3[NB-1] = u;



	for (m=0; m<NB; m++){
		uuold[m] = uu3[m];
	}
	
	//dt
	t = t + dt;
	it=it +1;
	cout <<  "it " << it << endl;
}
real t1=t;
cout << " t1 =   " << t1 << endl;
plot(th,uu3[0],wait=1,grey=true,fill=true);
plot(th,uu3[NB-1],wait=1,grey=true,fill=true);