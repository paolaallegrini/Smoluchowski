macro Border2 
border C1(t=0, 2.*pi){x= 0.3*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
border C2(t=0, 2.*pi){x= 0.6*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
border C3(t=0, 2.*pi){x= 0.9*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th = buildmesh(c1(n) + c2(n) + c3(n) + c4(n) + C1(-n) + C2(-n) +C3(-n));
//

macro Border1
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th = buildmesh(c1(n) + c2(n) + c3(n) + c4(n) + C(-n));
//
//________________________________________________________________//
real L=1;
real r=0.2;
int n=5*2*2*2*2;
real h=1.0/n;

// Mesh
border c1 ( t=0,L)    {x=t; y=0; label=1;}
border c2 ( t=0,L)    {x=L; y=t; label=1;}
border c3 ( t=L,0)    {x=t; y=L; label=1;}
border c4 ( t=L,0)    {x=0; y=t; label=1;}
border C(t=0, 2.*pi){x= 0.5*L + r*cos(t); y= 0.5*L + r*sin(t); label=2;}
mesh th=buildmesh( c1(n) + c2(n) + c3(n) + c4(n) + C(-n) );

//________________________________________________________________//
//Parameters
int NB=5, N1=4,m,it=0;
bool b=true;
real dtmax=0.05, dt=dtmax, t=0, Tf=4;
real mass;
int Itf=Tf/dt;

func psi=( (x >0.5) && (y > 0.5) ) ? 0.5 : 0;


//matrice coag
real alpha= 10.0;
real[int,int] aa(NB,NB);
for(int i=1;i<=NB;i++){
	for(int j=1;j<NB;j++){
		aa(i-1,j-1)=alpha/(i*j);		
	}
}
//vector coeff_d
real[int] coeffd(NB);
for (int i=0;i<NB;i++){
	if(i<N1){coeffd(i)= 1.0;}
	else {coeffd(i)=0;}
}

//________________________________________________________________//
fespace Vh(th,P1);
Vh u,vh;
Vh[int] uu(NB);
Vh[int] uu1(NB);
Vh[int] uu2(NB);
Vh[int] uu3(NB);
Vh[int] uuold(NB);
Vh[int] Qg(NB);
Vh[int] Ql(NB);

real umin=0;

//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
//________________________________________________________________//
//Function to calculate dt
func real calcdt(){
	real dt1=dtmax;
	real dtemp=dtmax;
	for( int i=0; i<NB; i++){
		for (int id=0; id < th.nv ; id++){
			if (Ql[i][][id] != 0){
			 	dtemp=(uuold[i][][id])/(Ql[i][][id]);
			 	if (dtemp<dt1){
					dt1=dtemp;
				}
			}	
		} 
	}
	return dt1;
 }
//________________________________________________________________//
//Macro to calculate Qloss
macro Qloss	
for (m=0;m<NB-1;m++){
		Vh sum=0;	
		for (int m2=0;m2<NB;m2++){
			sum = sum + aa(m,m2)*uuold[m2];	
		}
		Ql[m]=uuold[m]*sum;
	}
	Ql[NB-1]=0;
//
//________________________________________________________________//
// macros to calculate Qgain
macro Qgain1
	for (m=2;m<NB;m++){
		Vh sum=0;	
		for (int m2=1;m2<m;m2++){
			sum = sum + aa(m2-1,m-m2-1)*uuold[m2-1]*uuold[m-m2-1];	
		}
		Qg[m-1]=0.5*sum;
	}
//

macro Qgain2
	Vh sum=0;
	for (int j=1; j<NB;j++){
		for (int k=1;k<NB;k++){
			if((j + k)>=NB){	
				sum = sum + aa(j-1,k-1)*uuold[j-1]*uuold[k-1];
			}	
		}
		Qg[NB-1]=0.5*sum;
	}
//

macro calcmass
	mass=0;
	for (int i=0; i < NB-1; i++){
		mass= mass + int2d(th) (uu[i]);
	}
//
//________________________________________________________________//
macro Grad(u) [dx(u), dy(u)] //

//Solve problem cluster size 1
problem smu1 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*coeffd[0]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
- int2d(th,qft=qf1pTlump)(-dt*Ql[0]*vh)
- int1d(th,2) (dt*psi*vh)
;

problem smu11 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*coeffd[0]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[0]*vh)
- int2d(th,qft=qf1pTlump)(-dt*Ql[0]*vh)
;

//Solve problem cluster size 2...NB-1
problem smu2 (u , vh)= 
 int2d(th,qft=qf1pTlump)(u*vh + dt*coeffd[m]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[m]*vh)
- int2d(th,qft=qf1pTlump)(dt*(Qg[m] - Ql[m])*vh)
;

//Solve problem cluster size NB
problem smu3 (u , vh)=
 int2d(th,qft=qf1pTlump)(u*vh + dt*coeffd[NB-1]*Grad(u)'*Grad(vh))
- int2d(th,qft=qf1pTlump) (uuold[NB-1]*vh)
- int2d(th,qft=qf1pTlump) (dt*Qg[NB-1]*vh)
;
//________________________________________________________________//
//Time loop 1

for(int it=0; it < Itf; it++){	
	//calculating Q
	
	//Calculating Qloss
	Qloss
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1
	//Calculating Qgain for assembly size NB
	Qgain2
	
	dt=calcdt(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	// monomeric form
	calcmass
	cout << "mass= " << mass << endl; 
	smu1;	uu[0]=u;


	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		smu2;
		uu[m] = u;
	}

	//Assembly size NB
	smu3;
	uu[NB-1] = u;
	
	for (m=0; m<NB; m++){
		uuold[m] = uu[m];
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << endl;
}
for (m=0; m<NB; m++){uu1[m] = uu[m];}

real t1=t;
cout << " t1 =   " << t1 << endl;
cout <<"________________________________________________________________"<<endl;
//________________________________________________________________//
//Time loop 2
dtmax=dtmax/2;
dt=dtmax;
Itf=Tf/dt;
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
for(int it=0; it < Itf; it++){	
	//calculating Q
	
	//Calculating Qloss
	Qloss
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1
	//Calculating Qgain for assembly size NB
	Qgain2
	
	dt=calcdt(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	// monomeric form
	calcmass
	cout << "mass= " << mass << endl; 
	smu1;	uu[0]=u;


	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		smu2;
		uu[m] = u;
	}

	//Assembly size NB
	smu3;
	uu[NB-1] = u;
	
	for (m=0; m<NB; m++){
		uuold[m] = uu[m];
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << endl;
}
for (m=0; m<NB; m++){uu2[m] = uu[m];}
real t2=t;
cout << " t2 =   " << t2 << endl;
cout <<"________________________________________________________________"<<endl;
//________________________________________________________________//
//Time loop 3
dtmax=dtmax/2;
dt=dtmax;
Itf=Tf/dt;
t=0;
//Initialise u0
for (m=0;m<NB;m++){
	uuold[m]=0;
}
for(int it=0; it < Itf; it++){	
	//calculating Q
	
	//Calculating Qloss
	Qloss
	//Calculating Qgain for assemblies size 2...NB-1
	Qgain1
	//Calculating Qgain for assembly size NB
	Qgain2
	
	dt=calcdt(); cout << "dt=" << dt << endl;
	//cout << "dt=" << calcdt() << endl;

	// monomeric form
	calcmass
	cout << "mass= " << mass << endl; 
	smu1;	uu[0]=u;


	//Assemblies size 2...NB-1
	for (m=1; m<NB-1;m++)
	{
		smu2;
		uu[m] = u;
	}

	//Assembly size NB
	smu3;
	uu[NB-1] = u;
	
	for (m=0; m<NB; m++){
		uuold[m] = uu[m];
	}
	
	//dt
	t = t + dt;
	cout <<  "it " << it << endl;
}
for (m=0; m<NB; m++){uu3[m] = uu[m];}
real t3=t;
cout << " t3 =   " << t3 << endl;
cout <<"________________________________________________________________"<<endl;

cout << " t1 t2 t3  =   " << t1 << " " << t2 << " "<< t3 << endl;

real[int] err1(NB);
real[int] err2(NB);

real p1; 
for (int i=0 ;i<NB; i++){ 
	err1[i] = sqrt( int2d(th) ((uu1[i] - uu2[i])^2) );
	err2[i] = sqrt ( int2d(th) ((uu2[i] - uu3[i])^2) );
	cout << "\n err1("<<i+1<<")= " << err1[i] << "\t err2("<<i+1<<")= " << err2[i]<< endl;

	p1=log(err1[i]/err2[i]);
	p1=p1/log(2.0);
	cout << "\t p1(" << i+1 <<")= " << p1 << ";" <<endl;


}


 
for (m=0;m<NB; m++){
plot(th,uuold[m],wait=1,fill=true,value=true,cmm="u" + m );
}