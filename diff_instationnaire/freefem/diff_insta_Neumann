/* Variables générales*/
load "gmsh";
mesh th=gmshload("../../maillage/square_4_borders_hole.msh");
// plot(Th, wait= true, cmm = "Mon superbe maillage");

real dt=0.01;
real coeffd=3;
int Itf=2;
fespace Vh(th,P1);
Vh uh,vh,uold;

//Solve

int it=0;
uold=uh;

problem Diffusion (uh , vh, solver=LU) = 
int2d(th) (coeffd*dx(uh)*dx(vh)+coeffd*dy(uh)*dy(vh))
+ int2d(th)(uh*vh)
//- int2d(th) (uold*vh)
- int1d(th,1) (0.5*vh); //Neumann_mur
//+on(2,uh=22)
//+on(3,uh=2);

//Time loop
for ( it = 0; it <Itf ; it++ ) 
{
    Diffusion;
    uold = uh;

  /*cout<< "it= " << it << endl;
  for (int j=0;j<uold[].n ; j++)
  {
  	cout << "uold(" << j <<")= "<< uold[][j] << endl;
  }*/

	if (it%10==0){
	plot(th,uh,wait=1,fill=true);
	  for (int j=0;j<uold[].n ; j++)
  {
  	cout << "uold(" << j <<")= "<< uold[][j] << endl;
  }
	}
}

  for (int j=0;j<uold[].n ; j++)
  {
  	cout << "uold(" << j <<")= "<< uold[][j] << endl;
  }



/*vecteur B
varf pbDiffusion (uh , vh, solver=LU) = int2d(th) (+dt*coeffd*dx(uh)*dx(vh)+dt*coeffd*dy(uh)*dy(vh))
+int2d(th)(uh*vh)- int2d(th) (uold*vh)
+on(1,uh=20);
Vh B;
B[] = pbDiffusion (0, Vh);

{ 
  ofstream fout("B.txt") ;
  for (int j=0;j<B[].n ; j++)
  {
  	fout << B[][j] << endl ;
  }
}
*/
